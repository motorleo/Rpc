// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcMessage.proto

#ifndef PROTOBUF_RpcMessage_2eproto__INCLUDED
#define PROTOBUF_RpcMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace maxiaoda {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RpcMessage_2eproto();
void protobuf_AssignDesc_RpcMessage_2eproto();
void protobuf_ShutdownFile_RpcMessage_2eproto();

class RpcMessage;

enum MessageType {
  REQUEST = 0,
  RESPONSE = 1,
  ERROR = 2
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = REQUEST;
const MessageType MessageType_MAX = ERROR;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum ErrorReason {
  UKNOWERROR = 0
};
bool ErrorReason_IsValid(int value);
const ErrorReason ErrorReason_MIN = UKNOWERROR;
const ErrorReason ErrorReason_MAX = UKNOWERROR;
const int ErrorReason_ARRAYSIZE = ErrorReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorReason_descriptor();
inline const ::std::string& ErrorReason_Name(ErrorReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorReason_descriptor(), value);
}
inline bool ErrorReason_Parse(
    const ::std::string& name, ErrorReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorReason>(
    ErrorReason_descriptor(), name, value);
}
// ===================================================================

class RpcMessage : public ::google::protobuf::Message {
 public:
  RpcMessage();
  virtual ~RpcMessage();

  RpcMessage(const RpcMessage& from);

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMessage& default_instance();

  void Swap(RpcMessage* other);

  // implements Message ----------------------------------------------

  RpcMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMessage& from);
  void MergeFrom(const RpcMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .maxiaoda.MessageType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::maxiaoda::MessageType type() const;
  inline void set_type(::maxiaoda::MessageType value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string service = 3;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 3;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const char* value, size_t size);
  inline ::std::string* mutable_service();
  inline ::std::string* release_service();
  inline void set_allocated_service(::std::string* service);

  // optional string method = 4;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 4;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // optional bytes contend = 5;
  inline bool has_contend() const;
  inline void clear_contend();
  static const int kContendFieldNumber = 5;
  inline const ::std::string& contend() const;
  inline void set_contend(const ::std::string& value);
  inline void set_contend(const char* value);
  inline void set_contend(const void* value, size_t size);
  inline ::std::string* mutable_contend();
  inline ::std::string* release_contend();
  inline void set_allocated_contend(::std::string* contend);

  // optional .maxiaoda.ErrorReason error = 6;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 6;
  inline ::maxiaoda::ErrorReason error() const;
  inline void set_error(::maxiaoda::ErrorReason value);

  // @@protoc_insertion_point(class_scope:maxiaoda.RpcMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_contend();
  inline void clear_has_contend();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 id_;
  ::std::string* service_;
  ::std::string* method_;
  ::std::string* contend_;
  int error_;
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();

  void InitAsDefaultInstance();
  static RpcMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcMessage

// required .maxiaoda.MessageType type = 1;
inline bool RpcMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::maxiaoda::MessageType RpcMessage::type() const {
  // @@protoc_insertion_point(field_get:maxiaoda.RpcMessage.type)
  return static_cast< ::maxiaoda::MessageType >(type_);
}
inline void RpcMessage::set_type(::maxiaoda::MessageType value) {
  assert(::maxiaoda::MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:maxiaoda.RpcMessage.type)
}

// required int32 id = 2;
inline bool RpcMessage::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMessage::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcMessage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RpcMessage::id() const {
  // @@protoc_insertion_point(field_get:maxiaoda.RpcMessage.id)
  return id_;
}
inline void RpcMessage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:maxiaoda.RpcMessage.id)
}

// optional string service = 3;
inline bool RpcMessage::has_service() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcMessage::set_has_service() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcMessage::clear_has_service() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcMessage::clear_service() {
  if (service_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_->clear();
  }
  clear_has_service();
}
inline const ::std::string& RpcMessage::service() const {
  // @@protoc_insertion_point(field_get:maxiaoda.RpcMessage.service)
  return *service_;
}
inline void RpcMessage::set_service(const ::std::string& value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_ = new ::std::string;
  }
  service_->assign(value);
  // @@protoc_insertion_point(field_set:maxiaoda.RpcMessage.service)
}
inline void RpcMessage::set_service(const char* value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_ = new ::std::string;
  }
  service_->assign(value);
  // @@protoc_insertion_point(field_set_char:maxiaoda.RpcMessage.service)
}
inline void RpcMessage::set_service(const char* value, size_t size) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:maxiaoda.RpcMessage.service)
}
inline ::std::string* RpcMessage::mutable_service() {
  set_has_service();
  if (service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:maxiaoda.RpcMessage.service)
  return service_;
}
inline ::std::string* RpcMessage::release_service() {
  clear_has_service();
  if (service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_;
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMessage::set_allocated_service(::std::string* service) {
  if (service_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_;
  }
  if (service) {
    set_has_service();
    service_ = service;
  } else {
    clear_has_service();
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:maxiaoda.RpcMessage.service)
}

// optional string method = 4;
inline bool RpcMessage::has_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcMessage::set_has_method() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcMessage::clear_has_method() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcMessage::clear_method() {
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& RpcMessage::method() const {
  // @@protoc_insertion_point(field_get:maxiaoda.RpcMessage.method)
  return *method_;
}
inline void RpcMessage::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(value);
  // @@protoc_insertion_point(field_set:maxiaoda.RpcMessage.method)
}
inline void RpcMessage::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(value);
  // @@protoc_insertion_point(field_set_char:maxiaoda.RpcMessage.method)
}
inline void RpcMessage::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:maxiaoda.RpcMessage.method)
}
inline ::std::string* RpcMessage::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:maxiaoda.RpcMessage.method)
  return method_;
}
inline ::std::string* RpcMessage::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMessage::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:maxiaoda.RpcMessage.method)
}

// optional bytes contend = 5;
inline bool RpcMessage::has_contend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcMessage::set_has_contend() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcMessage::clear_has_contend() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcMessage::clear_contend() {
  if (contend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contend_->clear();
  }
  clear_has_contend();
}
inline const ::std::string& RpcMessage::contend() const {
  // @@protoc_insertion_point(field_get:maxiaoda.RpcMessage.contend)
  return *contend_;
}
inline void RpcMessage::set_contend(const ::std::string& value) {
  set_has_contend();
  if (contend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contend_ = new ::std::string;
  }
  contend_->assign(value);
  // @@protoc_insertion_point(field_set:maxiaoda.RpcMessage.contend)
}
inline void RpcMessage::set_contend(const char* value) {
  set_has_contend();
  if (contend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contend_ = new ::std::string;
  }
  contend_->assign(value);
  // @@protoc_insertion_point(field_set_char:maxiaoda.RpcMessage.contend)
}
inline void RpcMessage::set_contend(const void* value, size_t size) {
  set_has_contend();
  if (contend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contend_ = new ::std::string;
  }
  contend_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:maxiaoda.RpcMessage.contend)
}
inline ::std::string* RpcMessage::mutable_contend() {
  set_has_contend();
  if (contend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contend_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:maxiaoda.RpcMessage.contend)
  return contend_;
}
inline ::std::string* RpcMessage::release_contend() {
  clear_has_contend();
  if (contend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contend_;
    contend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMessage::set_allocated_contend(::std::string* contend) {
  if (contend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contend_;
  }
  if (contend) {
    set_has_contend();
    contend_ = contend;
  } else {
    clear_has_contend();
    contend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:maxiaoda.RpcMessage.contend)
}

// optional .maxiaoda.ErrorReason error = 6;
inline bool RpcMessage::has_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RpcMessage::set_has_error() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RpcMessage::clear_has_error() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RpcMessage::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::maxiaoda::ErrorReason RpcMessage::error() const {
  // @@protoc_insertion_point(field_get:maxiaoda.RpcMessage.error)
  return static_cast< ::maxiaoda::ErrorReason >(error_);
}
inline void RpcMessage::set_error(::maxiaoda::ErrorReason value) {
  assert(::maxiaoda::ErrorReason_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:maxiaoda.RpcMessage.error)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace maxiaoda

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::maxiaoda::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::maxiaoda::MessageType>() {
  return ::maxiaoda::MessageType_descriptor();
}
template <> struct is_proto_enum< ::maxiaoda::ErrorReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::maxiaoda::ErrorReason>() {
  return ::maxiaoda::ErrorReason_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RpcMessage_2eproto__INCLUDED
